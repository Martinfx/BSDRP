#!/bin/sh
#
# Tool for measuring "equilibrium throughput" of a device
#
# BSD Router Project
# https://bsdrp.net
# Method based on this paper:
#  Methodology for Benchmarking IPsec Gateways
#  http://www.mecs-press.org/ijcnis/ijcnis-v4-n9/IJCNIS-V4-N9-1.pdf
#  From Adam Tisovsky,Ivan Baronak
#  Department of Telecommunications, Slovak University of Technology

# Original paper used iperf in UDP mode, but this script uses netmap's pkt-gen
# and was improved for adding "paquet-per-second" mode usable for benching
# router
# This -noref version, use counters from the DUT only: Purpose to use
# when no referent endpoint able to manage the DUT performance

set -eu

#### (default) Variables
# tolerance in %
TOLERANCE=0.01
# output file for iperf and pkt-gen
WRKDIR="/tmp"
TX_FILE=${WRKDIR}/equilibrium-tx.txt
WRKDATA="${WRKDIR}/equilibrium.ministat.data"
# Packet LOAD in Bytes
PLOAD=""
# Maximum link-rate value (Mb/s or fps)
LINK_RATE=""
FWRATE=""
MAX_FWRATE=0
TREND=""
PEAK=false
PSIZE=""
FSIZE=""
DMAC=""
SMAC=""
TX_NIC=""
PPS_MODE=false
SOFT_UDP_CHK=false
SCHKSUM=""
UNIT="Mb/s"
AF=4
DURATION=30
# Generate 5000 flows
SRC_NET="198.18.10.1:2001-198.18.10.71"
DST_NET="198.19.10.1:2001-198.19.10.70"

### Functions
# A usefull function (from: http://code.google.com/p/sh-die/)
die() { echo -n "EXIT: " >&2; echo "$@" >&2; exit 1; }

usage () {
	echo "Usage: $0 -d DST_MAC -t TX_NIC [-l LINK_RATE ] [-p]"
	echo "          [-o TOLERANCE] [-s UDP-LOAD-SIZE]"
	echo "       -d Destination MAC of the Device Under Test (DUT)"
	echo "       -D SSH access to the DUT"
	echo "       -h Display this usage message"
	echo "       -l Maximum link bit-rate in Mbit/s."
	echo "             100 for a 100Mb/s link"
	echo "            1000 for a 1Gb/s link (default)"
	echo "           10000 for a 10Gb/s link"
	echo "           If option -p, this value is in Kilo packet-per-second"
	echo "           Maximum link packet rate in Kpps (1 frame = 1 packet)"
	echo "             148 for a 100Mb/s link"
	echo "            1488 for a Gigabit link (default if -p)"
	echo "           14880 for a 10Gb/s link"
	echo "       -p Switch into Packet-per-second mode"
	echo "           Input and displayed values unit change from Mb/s to Kpps"
	echo "           Use this option for benching router in place of IPSec gateway"
	echo "       -o define measure tolerance in % (default = 0.01 for 0.1%)"
	echo "       -R sysctl counter to retreived received packets on the DUT"
	echo "       -t NIC used for sending load"
	echo "       -T sysctl counter to retreived transmitted packets on the DUT"
	echo "       -s Size of the UDP load"
	echo "           default: 500 in Mb/s, 18 in pps mode"
	echo "           Minimum load for Ethernet: 18"
	echo "       -u Enable software UDP checksum on pkt-gen"
	echo "Example: $0 -d 00:1b:21:d3:8f:3e -t igb2 -D root@1.1.1.1 -R dev.cxl.0.stats.rx_frames -T dev.cxl.1.stats.tx_frames"
    echo "IP source range: ${SRC_NET}"
    echo "IP destination subnet: ${DST_NET}"
	echo ""
	exit 1
}

extract () {
    # Extract the maximum value from a raw output of pkt-gen in generator mode
    # $1 : Input file
	# Sent 69188190 packets 37499998980 bytes 496811 events 542 bytes each in 31.37 seconds.
    # Speed: 2205864 pps Bandwidth: 9564624707 bps (raw 9564624707 bps). Average batch: 139.26 pkts
	GEN_PACKETS=$(tail -n 2 $1 | grep -E '^Sent[[:space:]].*' $1 | cut -d ' ' -f 2)
	GEN_DURATION=$(tail -n 2 $1 | grep -E '^Sent[[:space:]].*' $1 | cut -d ' ' -f 12)
	GEN_PPS=$(tail -n 2 $1 | grep -E '^Speed:[[:space:]].*' $1 | cut -d ' ' -f 2)
	GEN_BPS=$(tail -n 2 $1 | grep -E '^Speed:[[:space:]].*' $1 | cut -d ' ' -f 5)
	if (${PPS_MODE}); then
		# Need to convert the pps value into Kpps
		GEN_CHECK=$(( GEN_PPS / 1000 ))
	else
		# Need to convert the bps value into a Mb/s value
		GEN_CHECK=$(( GEN_BPS / 1000000 ))
	fi
}

get_forwarding_rate () {
	# Start load process
	[ -f ${TX_FILE} ] && rm ${TX_FILE}
	# We are using pkt-gen, and its rate value is pps, need some conversion
	if (${PPS_MODE}); then
		PPS=$(( OLOAD * 1000 ))
	else
		# PPS-RATE = bandwitdh-in-bps / Frame size in bit
		PPS=$(( OLOAD * 1000000 / FSIZE / 8))
	fi
	# bench should running during 30 seconds minimum
	PACKETS_TO_SENT=$(( PPS * DURATION ))

	# Get initial counters

	SSH_CMD="/usr/bin/ssh -q ${SSH_CREDS}"

	COUNTER_RX_PREV=$(${SSH_CMD} sysctl -n ${STATS_RX})
	COUNTER_TX_PREV=$(${SSH_CMD} sysctl -n ${STATS_TX})

	CMD_TX="pkt-gen -f tx -N ${SCHKSUM} -${AF} -i ${TX_NIC} -l ${FSIZE} -R ${PPS} -n ${PACKETS_TO_SENT} \
-d ${DST_NET} -D ${DMAC} -S ${SMAC} -s ${SRC_NET}"
	echo ${CMD_TX} > ${TX_FILE}
	${CMD_TX} >> ${TX_FILE} 2>&1
	# Now close the receiver

	# Check than generator correctly generate PPS value
	extract ${TX_FILE}

	# Retreive new counter
	COUNTER_RX=$(${SSH_CMD} sysctl -n ${STATS_RX})
	COUNTER_TX=$(${SSH_CMD} sysctl -n ${STATS_TX})
	COUNTER_RX=$(( COUNTER_RX - COUNTER_RX_PREV ))
	COUNTER_TX=$(( COUNTER_TX - COUNTER_TX_PREV ))

	# Diff between RX and TX should be 0 (with the tolerance for keep-alive packets)
	DIFF_PKT=$(( COUNTER_RX - COUNTER_TX ))
	if [ ${DIFF_PKT} -eq 0 ]; then
		FWRATE=${OLOAD}
	else
		if (${PPS_MODE}); then
			# Converting in Kpps
			FWRATE=$(( COUNTER_TX / DURATION / 1000 ))
		else
			# Converting in Mbps
			FWRATE=$(( COUNTER_TX / DURATION * FSIZE * 8 / 1000000 ))
		fi
	fi
	# Then extract a uniq value
	# Allow some tolerance to the check too (and add /1 for generating integer)
	OLOAD_TOL=$(echo "$OLOAD*(1-$TOLERANCE)/1" | bc)
	if [ ${GEN_CHECK} -lt ${OLOAD_TOL} ]; then
		echo "  - Warning: Generated only ${GEN_CHECK}${UNIT} in place of ${OLOAD}${UNIT}"
		if [ ${FWRATE} -ge ${GEN_CHECK} ]; then
			# Dut is managing the maximum throughput of the packet generator"
			echo "  - Measured forwarding rate = ${FWRATE} ${UNIT} wich is the maximum supported by generator"
			exit 0
		fi
	fi
}

#### Main

args=$(getopt 46d:D:hl:po:r:R:s:t:T:u $*)

set -- $args
for i
do
    case "$i" in
        -d)
            DMAC=$2
			shift
            shift
			;;
        -D)
            SSH_CREDS=$2
			shift
            shift
			;;
		-h)
			usage
			;;
        -l)
            LINK_RATE=$2
            shift
            shift
            ;;
		-p)
			PPS_MODE=true
			shift
			;;
		-o)
			TOLERANCE=$2
			shift
			shift
			;;
   		-R)
			STATS_RX=$2
			shift
			shift
			;;
		-s)
			PLOAD=$2
			shift
			shift
			;;
    	 -t)
			TX_NIC=$2
			shift
			shift
			;;
    	 -T)
			STATS_TX=$2
			shift
			shift
			;;
		-u)
			SOFT_UDP_CHK=true
			shift
			;;
		-4)
			AF=4
			shift
			;;
		-6)
			AF=6
			DST_NET="[2001:2:0:8010::1]:2000-[2001:2:0:8010::64]"
			SRC_NET="[2001:2:0:10::1]:2000-[2001:2:0:10::14]"
			shift
			;;
		--)
            shift
            break
	esac
done

# Check for mandatory value
if [ -z "${DMAC}" ]; then
	echo "Missing Destination MAC"
	usage
fi
if [ -z "${TX_NIC}" ]; then
	echo "Missing TX NIC"
	usage
fi
if [ -z "${STATS_RX}" ]; then
	echo "Missing sysctl to retreive RX stats"
	usage
fi
if [ -z "${STATS_TX}" ]; then
	echo "Missing systcl to retreive TX stats"
	usage
fi

# Set the default value corresponding to differents mode
if [ -z ${PLOAD} ]; then
	if (${PPS_MODE}); then
		# Minimum Frame size of an UDP IPv4 packet is 64 bytes
		# but min frame size of an UDP IPv6 packet is 68 bytes
		[ ${AF} -eq 6 ] && PLOAD=0 || PLOAD=18
	else
		PLOAD=500
	fi
fi

if [ -z ${LINK_RATE} ]; then
	(${PPS_MODE}) && LINK_RATE=1488	|| LINK_RATE=1000
fi

# Packet LOAD in Bytes
# UDP load + 20 bytes IPv4 header + 8 bytes UDP header
# UDP load + 40 bytes IPv6 header + 8 bytes UDP header
[ ${AF} -eq 6 ] && PSIZE=$(( PLOAD + 48)) || PSIZE=$(( PLOAD + 28))

# Frame size (excluding CRC) = Packet SIZE + 14 bytes Ethernet header
FSIZE=$(( PSIZE + 14))

(${PPS_MODE}) && UNIT="Kpps"

SMAC=$(ifconfig ${TX_NIC} ether | grep ether | cut -d ' ' -f 2)
if [ -z "${SMAC}" ]; then
    die "Didn't get MAC of ${TX_NIC}"
fi

# Initial offered load value, should be set to 50% of the link bit-rate
OLOAD=$(( LINK_RATE / 2 ))
# step (in Mbit) should be 25% of the link bit-rate
STEP=$(( LINK_RATE / 4 ))

# Start a generator
if (${SOFT_UDP_CHK}); then
	SCHKSUM="-U"
else
	SCHKSUM=""
	ifconfig ${TX_NIC} down
	ifconfig ${TX_NIC} txcsum
	ifconfig ${TX_NIC} up
fi

echo "Benchmark tool using equilibrium throughput method"
(${PPS_MODE}) && echo "- Benchmark mode: Throughput (pps) for Router" || echo "- Benchmark mode: Bandwitdh (bps) for VPN gateway"
echo "- UDP load = ${PLOAD}B, IPv${AF} packet size=${PSIZE}B, Ethernet frame size=${FSIZE}B"
echo "- Link rate = ${LINK_RATE} ${UNIT}"
echo "- Tolerance = ${TOLERANCE}"
for i in $(seq 1 16);do
	echo "Iteration $i"
	echo "  - Offering load = ${OLOAD} ${UNIT}"
	echo "  - Step = ${STEP} ${UNIT}"
	[ -n "${TREND}" ] && echo "  - Trend = ${TREND}"
	get_forwarding_rate
	echo "  - Measured forwarding rate = ${FWRATE} ${UNIT}"
	if [ ${FWRATE} -gt ${OLOAD} ]; then
		echo "  - forwarding rate greater than offering load! (forcing FWRATE=OLOAD)"
		FWRATE=${OLOAD}
	fi
	[ ${FWRATE} -lt 1 ] && die "FWRATE lower than 1 ${UNIT}, can't continue"
	[ ${FWRATE} -gt ${MAX_FWRATE} ] && MAX_FWRATE=${FWRATE}
	# receiving load can't be greater than offered load, but rouding value can create this problem
	# This is why the next test is a -ge in place of -eq
	# and the output of pkt-gen often create a problem: It gives 49999Kpps in place of 50000Kpps
	# Then in place of comparing FWRATE with OLOAD, with use tolerance here too (not in the initial equilibrium paper)
	OLOAD_TOL=$(echo "$OLOAD*(1-$TOLERANCE)/1" | bc)
	if [ ${FWRATE} -ge ${OLOAD_TOL} ]; then
		[ "${TREND}" = "decreasing" ] && PEAK=true
		(${PEAK}) && STEP=$(( STEP / 2 ))
		OLOAD=$(( OLOAD + STEP ))
		TREND="increasing"
	else
		[ "${TREND}" = "increasing" ] && PEAK=true
		(${PEAK}) && STEP=$(( STEP / 2 ))
		OLOAD=$(( OLOAD - STEP ))
		# If the initial LOAD is too big and result of first FWRATE already lower than STEP,
		#  the second iteration will set OLOAD to 0
		#  Try to fix this behavior by setting OLOAD=FWRATE if FWRATE < STEP
		if [ -z "${TREND}" ]; then
			if [ ${FWRATE} -lt ${STEP} ]; then
				echo "  - Forwared rate too low, forcing OLOAD=FWRATE and STEP=FWRATE/2"
				STEP=$(( FWRATE / 2 ))
				OLOAD=${FWRATE}
			fi
		fi
		TREND="decreasing"
	fi
	if [ ${OLOAD} -le 1 ]; then
		# We start by a too big value, and step reach 0 too soon
		[ ${STEP} -lt 2 ] && die "Offered load reached 0 ${UNIT} (Too much packets dropped/corrupted?), can't continue"
		echo "  - Too big initial value, need to reduce STEP"
		STEP=$(( STEP / 2 ))
		OLOAD=$((OLOAD + STEP ))
	fi
	FLOAT=$(echo "(${OLOAD} * ${TOLERANCE})/1" | bc)
	if [ ${STEP} -le ${FLOAT} ]; then
		break
	fi
done
echo "Estimated Equilibrium Ethernet throughput= ${FWRATE} ${UNIT} (maximum value seen: ${MAX_FWRATE} ${UNIT})"
