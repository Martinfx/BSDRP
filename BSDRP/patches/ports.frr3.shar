# This is a shell archive.  Save it in a file, remove anything before
# this line, and then unpack it by entering "sh file".  Note, it may
# create directories; files and directories will be owned by you and
# have default permissions.
#
# This archive contains:
#
#	net/frr3
#	net/frr3/distinfo
#	net/frr3/pkg-descr
#	net/frr3/Makefile
#	net/frr3/pkg-plist
#	net/frr3/files
#	net/frr3/files/patch-vtysh_vtysh.c
#	net/frr3/files/frr.in
#	net/frr3/files/watchfrr.in
#	net/frr3/files/patch-zebra_kernel__socket.c
#	net/frr3/files/patch-zebra_ioctl.c
#	net/frr3/files/patch-Makefile.am
#
echo c - net/frr3
mkdir -p net/frr3 > /dev/null 2>&1
echo x - net/frr3/distinfo
sed 's/^X//' >net/frr3/distinfo << 'd2b52274321047853a8cd8b9d9476e88'
XTIMESTAMP = 1515855735
XSHA256 (FRRouting-frr-frr-3.0.3_GH0.tar.gz) = c850d6f7ae389e27acb1e808e01e561b0db7e0e35a902ca18ce53839c7906b7b
XSIZE (FRRouting-frr-frr-3.0.3_GH0.tar.gz) = 3168397
d2b52274321047853a8cd8b9d9476e88
echo x - net/frr3/pkg-descr
sed 's/^X//' >net/frr3/pkg-descr << 'a6c3c285835bdc482579e0fc200925f9'
XFRRouting (FRR) is an IP routing protocol suite for Linux and Unix platforms
Xwhich includes protocol daemons for BGP, IS-IS, OSPF and RIP. FRR has its roots
Xin the Quagga project.
X
XWWW: https://frrouting.org/
a6c3c285835bdc482579e0fc200925f9
echo x - net/frr3/Makefile
sed 's/^X//' >net/frr3/Makefile << '6b203ac51d0f3fa35af543fe6cd92d40'
X# $FreeBSD: head/net/frr/Makefile 467384 2018-04-15 11:23:41Z olivier $
X
XPORTNAME=	frr
XPORTVERSION=	3.0.3
XDISTVERSIONPREFIX=	frr-
XCATEGORIES=	net ipv6
XPKGNAMESUFFIX=	3
X
XMAINTAINER=	olivier@FreeBSD.org
XCOMMENT=	IP routing protocol suite including BGP, IS-IS, OSPF and RIP
X
XLICENSE=	GPLv2
XLICENSE_FILE=	${WRKSRC}/COPYING
X
XBUILD_DEPENDS=	gawk:lang/gawk
XLIB_DEPENDS=	libjson-c.so:devel/json-c
X
XCONFLICTS=	openbgpd openospfd zebra quagga-esr quagga
X
XGNU_CONFIGURE=	yes
XINSTALL_TARGET=	install-strip
XUSES=		autoreconf bison gmake pkgconfig libtool makeinfo readline
XUSE_LDCONFIG=	yes
X
XUSE_GITHUB=	yes
XGH_ACCOUNT=	FRRouting
X
XINFO=		frr
X
XOPTIONS_DEFINE=		FPM LDPD PAM SHELLACCESS TCPSOCKETS VTYSH MULTIPATH TCMALLOC
XOPTIONS_DEFAULT=	VTYSH
XOPTIONS_SUB=	yes
X# SNMP option build failed
X# checksum.c:79:21: warning: implicit declaration of function 'typeof' is
X#   invalid in C99 [-Wimplicit-function-declaration]
X# IRDP option needs something freebsd does not seem to have:
X# configure: error: 'IRDP requires in_pktinfo at the moment!'
X
XFPM_DESC=		Enable Forwarding Plane Manager support
XLDPD_DESC=		Build ldpd
XMULTIPATH_DESC=		Enable multipath function
XPAM_DESC=		Use libpam for PAM support in vtysh
XSHELLACCESS_DESC=	Allow users to access shell/telnet/ssh
XSNMP_DESC=		SNMP support
XTCMALLOC_DESC=		Use tcmalloc
XTCPSOCKETS_DESC=	Use TCP/IP sockets for protocol daemons
XVTYSH_DESC=		Build integrated vty shell
X
XUSERS=	frr
XGROUPS=	frr frrvty
X
XCPPFLAGS+=	-I${LOCALBASE}/include
XLDFLAGS+=	-L${LOCALBASE}/lib
XINSTALL_TARGET=	install-strip
X
X# PIM compile but didn't work on FreeBSD
XCONFIGURE_ARGS=	--enable-user=frr \
X		--enable-group=frr \
X		--enable-vty-group=frrvty \
X		--sysconfdir=${ETCDIR} \
X		--localstatedir=/var/run/frr \
X		--disable-pimd
X
XSHELLACCESS_CONFIGURE_ENABLE=	shell-access
XFPM_CONFIGURE_ENABLE=		fpm
XPAM_CONFIGURE_WITH=		libpam
XLDPD_CONFIGURE_ENABLE=		ldpd
XMULTIPATH_CONFIGURE_ON=		--enable-multipath=64
XTCMALLOC_CONFIGURE_ENABLE=	tcmalloc
XTCMALLOC_LIB_DEPENDS=		libtcmalloc.so:devel/google-perftools
XSNMP_CONFIGURE_ENABLE=		snmp
XSNMP_LIB_DEPENDS=		libnetsnmp.so:net-mgmt/net-snmp
XTCPSOCKETS_CONFIGURE_ENABLE=	tcp-zebra
XVTYSH_CONFIGURE_ENABLE=		vtysh
X
XUSE_RC_SUBR=	frr watchfrr
X
Xpost-install:
X	${MKDIR} ${STAGEDIR}/var/run/frr
X
X.include <bsd.port.mk>
6b203ac51d0f3fa35af543fe6cd92d40
echo x - net/frr3/pkg-plist
sed 's/^X//' >net/frr3/pkg-plist << 'd67a66dcaafe34522f07f71dd87cfd3c'
Xbin/bgp_btoa
X%%VTYSH%%bin/vtysh
Xinclude/frr/bfd.h
Xinclude/frr/bitfield.h
Xinclude/frr/buffer.h
Xinclude/frr/checksum.h
Xinclude/frr/command.h
Xinclude/frr/command_match.h
Xinclude/frr/csv.h
Xinclude/frr/distribute.h
Xinclude/frr/event_counter.h
Xinclude/frr/fifo.h
Xinclude/frr/filter.h
Xinclude/frr/getopt.h
Xinclude/frr/graph.h
Xinclude/frr/hash.h
Xinclude/frr/hook.h
Xinclude/frr/if.h
Xinclude/frr/if_rmap.h
Xinclude/frr/imsg.h
Xinclude/frr/jhash.h
Xinclude/frr/json.h
Xinclude/frr/keychain.h
Xinclude/frr/libfrr.h
Xinclude/frr/libospf.h
Xinclude/frr/linklist.h
Xinclude/frr/log.h
Xinclude/frr/md5.h
Xinclude/frr/memory.h
Xinclude/frr/memory_vty.h
Xinclude/frr/module.h
Xinclude/frr/monotime.h
Xinclude/frr/mpls.h
Xinclude/frr/network.h
Xinclude/frr/nexthop.h
Xinclude/frr/ns.h
Xinclude/frr/openbsd-queue.h
Xinclude/frr/openbsd-tree.h
Xinclude/frr/ospfapi/ospf_apiclient.h
Xinclude/frr/ospfd/ospf_api.h
Xinclude/frr/ospfd/ospf_asbr.h
Xinclude/frr/ospfd/ospf_dump.h
Xinclude/frr/ospfd/ospf_dump_api.h
Xinclude/frr/ospfd/ospf_ism.h
Xinclude/frr/ospfd/ospf_lsa.h
Xinclude/frr/ospfd/ospf_lsdb.h
Xinclude/frr/ospfd/ospf_nsm.h
Xinclude/frr/ospfd/ospf_opaque.h
Xinclude/frr/ospfd/ospfd.h
Xinclude/frr/plist.h
Xinclude/frr/pqueue.h
Xinclude/frr/prefix.h
Xinclude/frr/privs.h
Xinclude/frr/ptm_lib.h
Xinclude/frr/pw.h
Xinclude/frr/qobj.h
Xinclude/frr/route_types.h
Xinclude/frr/routemap.h
Xinclude/frr/sigevent.h
Xinclude/frr/spf_backoff.h
Xinclude/frr/skiplist.h
Xinclude/frr/smux.h
Xinclude/frr/sockopt.h
Xinclude/frr/sockunion.h
Xinclude/frr/srcdest_table.h
Xinclude/frr/stream.h
Xinclude/frr/systemd.h
Xinclude/frr/table.h
Xinclude/frr/thread.h
Xinclude/frr/vector.h
Xinclude/frr/version.h
Xinclude/frr/vrf.h
Xinclude/frr/vty.h
Xinclude/frr/wheel.h
Xinclude/frr/workqueue.h
Xinclude/frr/zassert.h
Xinclude/frr/zclient.h
Xinclude/frr/zebra.h
Xlib/libfrr.a
Xlib/libfrr.so
Xlib/libfrr.so.0
Xlib/libfrr.so.0.0.0
Xlib/libfrrospfapiclient.a
Xlib/libfrrospfapiclient.so
Xlib/libfrrospfapiclient.so.0
Xlib/libfrrospfapiclient.so.0.0.0
Xman/man1/frr.1.gz
Xman/man8/isisd.8.gz
Xman/man8/watchfrr.8.gz
X%%VTYSH%%man/man1/vtysh.1.gz
Xman/man8/bgpd.8.gz
X%%LDPD%%man/man8/ldpd.8.gz
Xman/man8/ospf6d.8.gz
Xman/man8/ospfclient.8.gz
Xman/man8/ospfd.8.gz
Xman/man8/ripd.8.gz
Xman/man8/ripngd.8.gz
Xman/man8/zebra.8.gz
Xsbin/bgpd
X%%LDPD%%sbin/ldpd
Xsbin/ospf6d
Xsbin/ospfclient
Xsbin/ospfd
Xsbin/ripd
Xsbin/ripngd
Xsbin/zebra
Xsbin/isisd
Xsbin/rfptest
Xsbin/ssd
Xsbin/watchfrr
X%%ETCDIR%%/bgpd.conf.sample
X%%ETCDIR%%/bgpd.conf.sample2
X%%ETCDIR%%/bgpd.conf.vnc.sample
X%%ETCDIR%%/isisd.conf.sample
X%%LDPD%%%%ETCDIR%%/ldpd.conf.sample
X%%ETCDIR%%/ospf6d.conf.sample
X%%ETCDIR%%/ospfd.conf.sample
X%%ETCDIR%%/ripd.conf.sample
X%%ETCDIR%%/ripngd.conf.sample
X%%VTYSH%%%%ETCDIR%%/vtysh.conf.sample
X%%ETCDIR%%/zebra.conf.sample
X@dir(frr,frr,750) /var/run/frr
d67a66dcaafe34522f07f71dd87cfd3c
echo c - net/frr3/files
mkdir -p net/frr3/files > /dev/null 2>&1
echo x - net/frr3/files/patch-vtysh_vtysh.c
sed 's/^X//' >net/frr3/files/patch-vtysh_vtysh.c << '0efc5e75c50345efda8eaaae539e3ce8'
X--- vtysh/vtysh.c.orig	2017-08-09 12:56:09.000000000 +0200
X+++ vtysh/vtysh.c	2017-08-22 22:04:36.068181000 +0200
X@@ -249,7 +249,7 @@
X 	if (pager_defined)
X 		vtysh_pager_name = strdup(pager_defined);
X 	else
X-		vtysh_pager_name = strdup("more");
X+		vtysh_pager_name = strdup("cat");
X }
X 
X /* Command execution over the vty interface. */
0efc5e75c50345efda8eaaae539e3ce8
echo x - net/frr3/files/frr.in
sed 's/^X//' >net/frr3/files/frr.in << 'dd73b26a4476d6ec279f9c2012c4f56b'
X#!/bin/sh
X#
X# $FreeBSD: head/net/frr/files/frr.in 465501 2018-03-25 07:44:59Z olivier $
X#
X
X# PROVIDE: frr
X# REQUIRE: netif routing 
X# KEYWORD: nojailvnet shutdown
X
X# Add the following line to /etc/rc.conf to enable frr:
X#  frr_enable="YES"
X#
X# You may also wish to use the following variables to fine-tune startup:
X#  frr_flags=""
X#  frr_daemons="zebra ripd ripngd ospfd ospf6d bgpd isisd"
X#  frr_vysh_boot="YES"
X# Per daemon tuning may be done with daemon_name_flags
X#  zebra_flags="-P 0"
X#  bgpd_flags="-nrP 0" and so on
X# If you want to give the routing deamons a chance to catchup before
X# continueing, set frr_wait_for to a "default" or certain prefix.
X#  frr_wait_for="default"
X# Set the time limit for the wait.
X#  frr_wait_seconds="90"
X#
X# If the frr daemons require additional shared libraries to start,
X# use the following variable to run ldconfig(8) in advance:
X#  frr_extralibs_path="/usr/local/lib ..."
X#
X# This RC script was adapted from the net/quagga port
X
X. /etc/rc.subr
X
Xname=frr
Xrcvar=$name_enable
X
Xstart_postcmd=start_postcmd
Xstop_postcmd="rm -f $pidfile"
Xconfigtest_cmd=check_config
Xextra_commands=configtest
Xcommand_args="-d"
X
Xload_rc_config $name
X: ${frr_enable:="NO"}
X: ${frr_flags:=""}
X: ${frr_daemons:="zebra ripd ripngd ospfd ospf6d bgpd isisd"}
X: ${frr_vtysh_boot:="NO"}
X: ${frr_wait_for:=""}
X: ${frr_wait_seconds:="90"}
X
Xcheck_config()
X{
X    echo "Checking $daemon.conf"
X	# pimd doesn't support -C
X	if [ "$daemon" = "pimd" ]; then
X		echo "Ignored"
X	else
X    	$command $daemon_flags -C
X    	result=$?
X    	if [ "$result" -eq "0" ]; then
X			echo "OK"
X    	else
X			echo "FAILED"
X			exit
X    	fi
X	fi
X}
X
Xstart_postcmd()
X{
X	local waited_for
X	waited_for=0
X	# Wait only when last daemon has started.
X	if [ "${frr_daemons}" = "${frr_daemons% ${name}}" ]; then
X		return;
X	fi
X        if [ -n "${frr_wait_for}" ]; then
X		echo Waiting for ${frr_wait_for} route...
X		while [ ${waited_for} -lt ${frr_wait_seconds} ]; do
X			/sbin/route -n get ${frr_wait_for} >/dev/null 2>&1 && break;
X			waited_for=$((waited_for+1))
X			sleep 1;
X		done
X		[ ${waited_for} -lt ${frr_wait_seconds} ] || echo Giving up...
X	fi
X}
X
Xdo_cmd()
X{
X	local ret
X	ret=0
X	for daemon in ${frr_daemons}; do
X	    command=%%PREFIX%%/sbin/${daemon}
X	    required_files=%%ETCDIR%%/${daemon}.conf
X	    pidfile=/var/run/frr/${daemon}.pid
X	    if [ ${frr_cmd} = "restart" ] || [ ${frr_cmd} = "start" ]; then
X		check_config
X	    fi
X	    if [ ${frr_cmd} = "start" ] && ! [ -f ${required_files} ]; then
X			continue
X	    fi
X	    if [ ${frr_cmd} = "stop" ] && [ -z $(check_process ${command}) ]; then
X			continue
X	    fi
X	    eval flags=\$\{${daemon}_flags:-\"${frr_flags}\"\}
X	    name=${daemon}
X	    _rc_restart_done=false
X	    run_rc_command "$1" || ret=1
X	done
X	if checkyesno frr_vtysh_boot; then
X	    echo "Booting for integrated-vtysh-config..."
X	    %%PREFIX%%/bin/vtysh -b
X	fi
X	return ${ret}
X}
X
Xfrr_cmd=$1
X
Xcase "$1" in
X    force*)
X	frr_cmd=${frr_cmd#force}
X	;;
X    fast*)
X	frr_cmd=${frr_cmd#fast}
X	;;
Xesac
Xshift
X
Xif [ $# -ge 1 ]; then
X	frr_daemons="$*"
Xfi
X
Xcase "${frr_cmd}" in
X    start)
X	if [ -n "${frr_extralibs_path}" ]; then
X	    /sbin/ldconfig -m ${frr_extralibs_path}
X	fi
X	# Why should I need to add this check ?
X	checkyesno frr_enable && do_cmd "start"
X	;;
X    stop)
X	frr_daemons=$(reverse_list ${frr_daemons})
X	do_cmd "stop"
X	;;
X    restart)
X	frr_daemons=$(reverse_list ${frr_daemons})
X    	do_cmd "stop"
X	frr_daemons=$(reverse_list ${frr_daemons})
X	checkyesno frr_enable && do_cmd "start"
X	;;
X    *)
X	do_cmd "${frr_cmd}"
X	;;
Xesac
dd73b26a4476d6ec279f9c2012c4f56b
echo x - net/frr3/files/watchfrr.in
sed 's/^X//' >net/frr3/files/watchfrr.in << '88920f3fdbbf828dde0e553c5d6190f0'
X#!/bin/sh
X#
X# $FreeBSD: head/net/frr/files/watchfrr.in 467384 2018-04-15 11:23:41Z olivier $
X#
X
X# PROVIDE: watchfrr
X# REQUIRE: NETWORKING frr
X# KEYWORD: nojailvtnet shutdown
X
X# Add the following line to /etc/rc.conf to enable watchfrr:
X# watchfrr_enable="YES"
X#
X# You may also wish to use the following variables to fine-tune startup:
X# watchfrr_flags
X
X. /etc/rc.subr
X
Xname=watchfrr
Xrcvar=${name}_enable
X
Xload_rc_config $name
X
Xstop_postcmd="rm -f $pidfile"
X
Xwatchfrr_enable=${watchfrr_enable:-"NO"}
X
Xcommand=%%PREFIX%%/sbin/watchfrr
Xpidfile=%%LOCALSTATE_DIR%%/watchfrr.pid
X
Xrun_rc_command "$1"
88920f3fdbbf828dde0e553c5d6190f0
echo x - net/frr3/files/patch-zebra_kernel__socket.c
sed 's/^X//' >net/frr3/files/patch-zebra_kernel__socket.c << '2a7f8e6f3c80bb72dc7f257a6e629470'
X--- zebra/kernel_socket.c.orig	2018-03-12 00:53:37 UTC
X+++ zebra/kernel_socket.c
X@@ -706,7 +706,7 @@ static void ifam_read_mesg(struct ifa_msghdr *ifm, uni
X 
X 	/* Assert read up end point matches to end point */
X 	if (pnt != end)
X-		zlog_warn("ifam_read() doesn't read all socket data");
X+		zlog_warn("ifam_read() doesn't read all socket data on interface %s", (ifnlen ? ifname : "(nil)"));
X }
X 
X /* Interface's address information get. */
2a7f8e6f3c80bb72dc7f257a6e629470
echo x - net/frr3/files/patch-zebra_ioctl.c
sed 's/^X//' >net/frr3/files/patch-zebra_ioctl.c << '000ecc7caa3f1c3ed7148dfc3c79ebd3'
X--- zebra/ioctl.c.orig	2018-05-31 17:07:00 UTC
X+++ zebra/ioctl.c
X@@ -396,8 +396,8 @@ void if_get_flags(struct interface *ifp)
X 
X 		/* Seems not all interfaces implement this ioctl */
X 		if (if_ioctl(SIOCGIFMEDIA, (caddr_t)&ifmr) < 0)
X-			zlog_err("if_ioctl(SIOCGIFMEDIA) failed: %s",
X-				 safe_strerror(errno));
X+			zlog_err("if_ioctl(SIOCGIFMEDIA) on interface %s failed: %s",
X+				 ifp->name, safe_strerror(errno));
X 		else if (ifmr.ifm_status & IFM_AVALID) /* Link state is valid */
X 		{
X 			if (ifmr.ifm_status & IFM_ACTIVE)
000ecc7caa3f1c3ed7148dfc3c79ebd3
echo x - net/frr3/files/patch-Makefile.am
sed 's/^X//' >net/frr3/files/patch-Makefile.am << '64f736b25264564fa3853075e84382c2'
X--- Makefile.am.orig	2017-03-08 14:59:07 UTC
X+++ Makefile.am
X@@ -4,7 +4,7 @@ SUBDIRS = lib qpb fpm @ZEBRA@ @LIBRFP@ @RFPTEST@ \
X 	 @BGPD@ @RIPD@ @RIPNGD@ @OSPFD@ @OSPF6D@ @LDPD@ \
X          @ISISD@ @PIMD@ @NHRPD@ \
X 	 @WATCHFRR@ @VTYSH@ @OSPFCLIENT@ @DOC@ m4 @pkgsrcdir@ \
X-         redhat @SOLARIS@ tests tools cumulus snapcraft
X+         redhat @SOLARIS@ tests cumulus snapcraft
X 
X DIST_SUBDIRS = lib qpb fpm zebra bgpd ripd ripngd ospfd ospf6d ldpd \
X 	  isisd watchfrr vtysh ospfclient doc m4 pkgsrc redhat tests \
64f736b25264564fa3853075e84382c2
exit

